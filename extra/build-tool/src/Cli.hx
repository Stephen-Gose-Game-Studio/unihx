import mcli.*;
import sys.FileSystem.*;
import haxe.io.Path;
import haxe.Resource;

using StringTools;

class Cli extends CommandLine
{
	/**
		Show this message.
	**/
	public function help()
	{
		Sys.println(this.showUsage());
		Sys.exit(0);
	}

	private function err(msg:String)
	{
		Sys.stderr().writeString(msg + "\n");
		Sys.exit(1);
	}

	private function haxe(args:Array<String>)
	{
		print( 'haxe ' + [for (arg in args) arg.split('"').join('\\\"') ].join(" ") );
		var ret = Sys.command('haxe', args);
		if (ret != 0)
			Sys.exit(ret);
	}

	private function deleteAll(dir:String)
	{
		for (f in readDirectory(dir))
		{
			if (isDirectory('$dir/$f'))
			{
				deleteAll('$dir/$f');
			} else {
				deleteFile('$dir/$f');
			}
		}
		deleteDirectory(dir);
	}

	private function copy(file:String, to:String)
	{
		sys.io.File.saveBytes(to, sys.io.File.getBytes(file));
	}

	/**
		Force always to yes
	**/
	public var force:Bool = false;

	public var verbose:Bool = false;

	private function print(msg:String)
	{
		if (verbose) Sys.println(msg);
	}

	private function ask(msg:String, ?preSelect:Bool):Bool
	{
		if (force) return true;
		Sys.println(msg);
		var stdin = Sys.stdin();
		var str = "(" + (preSelect == true ? "Y" : "y") + "/" + (preSelect == false ? "N" : "n") + ") ";
		while (true)
		{
			Sys.print(str);
			var ln = stdin.readLine().trim().toLowerCase();
			if (ln == "" && preSelect != null)
				return preSelect;
			else if (ln == "y")
				return true;
			else if (ln == "n")
				return false;
		}
	}

	public static function main()
	{
		var args = Sys.args();
		if (Sys.getEnv('HAXELIB_RUN') == "1")
		{
			unihxPath = Sys.getCwd();
			var curpath = args.pop();
			Sys.setCwd(curpath);
		}
		new mcli.Dispatch(args).dispatch(new Helper());
	}

	private static var unihxPath:String = null;
	private function getUnihxPath():String
	{
		if (unihxPath != null)
			return unihxPath;
		var p = new sys.io.Process('haxelib',['path','unihx']);
		try
		{
			while(true)
			{
				var ln = p.stdout.readLine().trim();
				if (ln.charCodeAt(0) != '-'.code && ln.indexOf('/src') >= 0 && exists(ln.substr(0,ln.length-1)))
				{
					unihxPath = ln.substr(0,ln.indexOf('/src'));
					break;
				}
			}
		}
		catch(e:haxe.io.Eof)
		{
		}
		if (p.exitCode() != 0 || unihxPath == null)
		{
			err('Cannot determine the path of the "unihx" project. Make sure haxelib is installed correctly, and unihx is installed through haxelib');
		}

		return unihxPath;
	}
}

/**
	unihx helper tool
**/
class Helper extends CommandLine
{
	/**
		Initializes the target Unity project to use unihx
	**/
	public function init(d:Dispatch)
	{
		d.dispatch(new InitCmd());
	}

}

/**
	unihx init [target-dir] : initializes the target Unity project to use unihx.
**/
class InitCmd extends Cli
{
	public function runDefault(targetDir=".")
	{
		if (!exists(targetDir))
		{
			err('"$targetDir" does not exist');
		}

		if (targetDir == "")
			targetDir = ".";
		// look for 'Assets' folder
		var assets = getAssets(targetDir);
		if (assets == null)
		{
			err('Cannot find the Assets folder at "$targetDir"');
		}
		if (assets == "")
			assets = ".";

		if (!exists(assets + "/classpaths.hxml"))
		{
			sys.io.File.saveContent(assets + '/classpaths.hxml', '#this file is automatically generated. any change made here may be lost\n-cp .\n-cp Scripts');
		}

		if (!exists(assets + "/build.hxml"))
		{
			sys.io.File.saveContent(assets + '/build.hxml', 'params.hxml\n# Add your own compiler parameters here\n');
		}

		if (!exists(assets + '/params.hxml') || ask('$targetDir/params.hxml already exists. Replace?',true))
		{
			sys.io.File.saveContent(assets + '/params.hxml', 'classpaths.hxml\n-lib unihx\n-cs hx-compiled\n-D unity_std_target=Standard Assets');
			var old = Sys.getCwd();
			Sys.setCwd(assets);
			haxe(['params.hxml',"--macro","include(\"unihx._internal.editor\")"]);
			Sys.setCwd(old);
		}

		var proj = assets + "/../" + Path.withoutDirectory( fullPath(assets + "/..") ) + '.hxproj';
		if (!exists(proj))
		{
			sys.io.File.saveContent(proj, Resource.getString("hxproj"));
		}

		for (f in ['smcs','gmcs'])
		{
			if (!exists(assets + '/$f.rsp'))
			{
				sys.io.File.saveContent(assets+'/$f.rsp', "-nowarn:0109,0114,0219,0429,0168,0162");
			}
		}

		// copy assets to Editor Default Resources
		if (exists(assets + '/Editor Default Resources/unihx'))
		{
			deleteAll(assets + '/Editor Default Resources/unihx');
		}

		createDirectory(assets + '/Editor Default Resources/unihx');
		var unihx = this.getUnihxPath() + "/extra/assets";
		for (file in readDirectory(unihx))
		{
			if (file.endsWith('.png'))
				copy('$unihx/$file', '$assets/Editor Default Resources/unihx/$file');
		}
	}

	private function getAssets(dir:String):Null<String>
	{
		var full = fullPath(dir).split('\\').join('/').split('/');
		while (full[full.length-1] == "")
			full.pop();

		var buf = new StringBuf();
		buf.add(".");
		while (full.length > 1)
		{
			var dir = full.join('/');
			for (file in readDirectory(dir))
			{
				if (file == "Assets")
					return buf + '/Assets';
			}
			buf.add('/..');
			full.pop();
		}
		return null;
	}

}
